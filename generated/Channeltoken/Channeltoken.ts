// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChannelBurn extends ethereum.Event {
  get params(): ChannelBurn__Params {
    return new ChannelBurn__Params(this);
  }
}

export class ChannelBurn__Params {
  _event: ChannelBurn;

  constructor(event: ChannelBurn) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChannelGatedMint extends ethereum.Event {
  get params(): ChannelGatedMint__Params {
    return new ChannelGatedMint__Params(this);
  }
}

export class ChannelGatedMint__Params {
  _event: ChannelGatedMint;

  constructor(event: ChannelGatedMint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChannelInitialMint extends ethereum.Event {
  get params(): ChannelInitialMint__Params {
    return new ChannelInitialMint__Params(this);
  }
}

export class ChannelInitialMint__Params {
  _event: ChannelInitialMint;

  constructor(event: ChannelInitialMint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get desc(): string {
    return this._event.parameters[3].value.toString();
  }

  get gated(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get chainId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _isErc1155(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get _minHolding(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get gated_contract(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get onlyAdminsTalk(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }

  get admins(): Array<Address> {
    return this._event.parameters[10].value.toAddressArray();
  }

  get owner(): Address {
    return this._event.parameters[11].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[12].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Channeltoken__getChannelTokenResultTokenStruct extends ethereum.Tuple {
  get _supply(): BigInt {
    return this[0].toBigInt();
  }

  get _name(): string {
    return this[1].toString();
  }

  get _description(): string {
    return this[2].toString();
  }

  get _gated(): boolean {
    return this[3].toBoolean();
  }

  get _chainId(): BigInt {
    return this[4].toBigInt();
  }

  get _isErc1155(): boolean {
    return this[5].toBoolean();
  }

  get _minHolding(): BigInt {
    return this[6].toBigInt();
  }

  get _gated_contract(): Address {
    return this[7].toAddress();
  }

  get _onlyAdminsTalk(): boolean {
    return this[8].toBoolean();
  }

  get admins(): Array<Address> {
    return this[9].toAddressArray();
  }

  get _owner(): Address {
    return this[10].toAddress();
  }
}

export class Channeltoken__tokensResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: boolean;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;
  value7: Address;
  value8: boolean;
  value9: Address;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: boolean,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
    value7: Address,
    value8: boolean,
    value9: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    return map;
  }

  get_supply(): BigInt {
    return this.value0;
  }

  get_name(): string {
    return this.value1;
  }

  get_description(): string {
    return this.value2;
  }

  get_gated(): boolean {
    return this.value3;
  }

  get_chainId(): BigInt {
    return this.value4;
  }

  get_isErc1155(): boolean {
    return this.value5;
  }

  get_minHolding(): BigInt {
    return this.value6;
  }

  get_gated_contract(): Address {
    return this.value7;
  }

  get_onlyAdminsTalk(): boolean {
    return this.value8;
  }

  get_owner(): Address {
    return this.value9;
  }
}

export class Channeltoken extends ethereum.SmartContract {
  static bind(address: Address): Channeltoken {
    return new Channeltoken("Channeltoken", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getChannelToken(id: BigInt): Channeltoken__getChannelTokenResultTokenStruct {
    let result = super.call(
      "getChannelToken",
      "getChannelToken(uint256):((uint256,string,string,bool,uint256,bool,uint256,address,bool,address[],address))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<Channeltoken__getChannelTokenResultTokenStruct>(
      result[0].toTuple()
    );
  }

  try_getChannelToken(
    id: BigInt
  ): ethereum.CallResult<Channeltoken__getChannelTokenResultTokenStruct> {
    let result = super.tryCall(
      "getChannelToken",
      "getChannelToken(uint256):((uint256,string,string,bool,uint256,bool,uint256,address,bool,address[],address))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Channeltoken__getChannelTokenResultTokenStruct>(
        value[0].toTuple()
      )
    );
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokens(param0: BigInt): Channeltoken__tokensResult {
    let result = super.call(
      "tokens",
      "tokens(uint256):(uint256,string,string,bool,uint256,bool,uint256,address,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Channeltoken__tokensResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toBoolean(),
      result[9].toAddress()
    );
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Channeltoken__tokensResult> {
    let result = super.tryCall(
      "tokens",
      "tokens(uint256):(uint256,string,string,bool,uint256,bool,uint256,address,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Channeltoken__tokensResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toBoolean(),
        value[9].toAddress()
      )
    );
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChannelGatedMintCall extends ethereum.Call {
  get inputs(): ChannelGatedMintCall__Inputs {
    return new ChannelGatedMintCall__Inputs(this);
  }

  get outputs(): ChannelGatedMintCall__Outputs {
    return new ChannelGatedMintCall__Outputs(this);
  }
}

export class ChannelGatedMintCall__Inputs {
  _call: ChannelGatedMintCall;

  constructor(call: ChannelGatedMintCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChannelGatedMintCall__Outputs {
  _call: ChannelGatedMintCall;

  constructor(call: ChannelGatedMintCall) {
    this._call = call;
  }
}

export class ChannelInitialMintCall extends ethereum.Call {
  get inputs(): ChannelInitialMintCall__Inputs {
    return new ChannelInitialMintCall__Inputs(this);
  }

  get outputs(): ChannelInitialMintCall__Outputs {
    return new ChannelInitialMintCall__Outputs(this);
  }
}

export class ChannelInitialMintCall__Inputs {
  _call: ChannelInitialMintCall;

  constructor(call: ChannelInitialMintCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _desc(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _gated(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _chainId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _isErc1155(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _minHolding(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _gated_contract(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _onlyAdminsTalk(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get admins(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }
}

export class ChannelInitialMintCall__Outputs {
  _call: ChannelInitialMintCall;

  constructor(call: ChannelInitialMintCall) {
    this._call = call;
  }
}

export class ChannelMintCall extends ethereum.Call {
  get inputs(): ChannelMintCall__Inputs {
    return new ChannelMintCall__Inputs(this);
  }

  get outputs(): ChannelMintCall__Outputs {
    return new ChannelMintCall__Outputs(this);
  }
}

export class ChannelMintCall__Inputs {
  _call: ChannelMintCall;

  constructor(call: ChannelMintCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChannelMintCall__Outputs {
  _call: ChannelMintCall;

  constructor(call: ChannelMintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetReceiverContractAddressCall extends ethereum.Call {
  get inputs(): SetReceiverContractAddressCall__Inputs {
    return new SetReceiverContractAddressCall__Inputs(this);
  }

  get outputs(): SetReceiverContractAddressCall__Outputs {
    return new SetReceiverContractAddressCall__Outputs(this);
  }
}

export class SetReceiverContractAddressCall__Inputs {
  _call: SetReceiverContractAddressCall;

  constructor(call: SetReceiverContractAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReceiverContractAddressCall__Outputs {
  _call: SetReceiverContractAddressCall;

  constructor(call: SetReceiverContractAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
