// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get followers(): Array<string> | null {
    let value = this.get("followers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set followers(value: Array<string> | null) {
    if (!value) {
      this.unset("followers");
    } else {
      this.set("followers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get following(): Array<string> | null {
    let value = this.get("following");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set following(value: Array<string> | null) {
    if (!value) {
      this.unset("following");
    } else {
      this.set("following", Value.fromStringArray(<Array<string>>value));
    }
  }

  get channels(): Array<string> | null {
    let value = this.get("channels");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set channels(value: Array<string> | null) {
    if (!value) {
      this.unset("channels");
    } else {
      this.set("channels", Value.fromStringArray(<Array<string>>value));
    }
  }

  get chats(): Array<string> | null {
    let value = this.get("chats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set chats(value: Array<string> | null) {
    if (!value) {
      this.unset("chats");
    } else {
      this.set("chats", Value.fromStringArray(<Array<string>>value));
    }
  }

  get broadcasts(): Array<string> | null {
    let value = this.get("broadcasts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set broadcasts(value: Array<string> | null) {
    if (!value) {
      this.unset("broadcasts");
    } else {
      this.set("broadcasts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get replies(): Array<string> | null {
    let value = this.get("replies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set replies(value: Array<string> | null) {
    if (!value) {
      this.unset("replies");
    } else {
      this.set("replies", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Channel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Channel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Channel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Channel", id.toString(), this);
    }
  }

  static load(id: string): Channel | null {
    return changetype<Channel | null>(store.get("Channel", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get isGated(): boolean {
    let value = this.get("isGated");
    return value!.toBoolean();
  }

  set isGated(value: boolean) {
    this.set("isGated", Value.fromBoolean(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (!value) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(<string>value));
    }
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    return value!.toI32();
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get ercType(): i32 {
    let value = this.get("ercType");
    return value!.toI32();
  }

  set ercType(value: i32) {
    this.set("ercType", Value.fromI32(value));
  }

  get minHolding(): i32 {
    let value = this.get("minHolding");
    return value!.toI32();
  }

  set minHolding(value: i32) {
    this.set("minHolding", Value.fromI32(value));
  }

  get isRestricted(): boolean {
    let value = this.get("isRestricted");
    return value!.toBoolean();
  }

  set isRestricted(value: boolean) {
    this.set("isRestricted", Value.fromBoolean(value));
  }

  get admins(): Array<string> | null {
    let value = this.get("admins");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set admins(value: Array<string> | null) {
    if (!value) {
      this.unset("admins");
    } else {
      this.set("admins", Value.fromStringArray(<Array<string>>value));
    }
  }

  get banned(): Array<string> | null {
    let value = this.get("banned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set banned(value: Array<string> | null) {
    if (!value) {
      this.unset("banned");
    } else {
      this.set("banned", Value.fromStringArray(<Array<string>>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get members(): Array<string> {
    let value = this.get("members");
    return value!.toStringArray();
  }

  set members(value: Array<string>) {
    this.set("members", Value.fromStringArray(value));
  }

  get chats(): Array<string> | null {
    let value = this.get("chats");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set chats(value: Array<string> | null) {
    if (!value) {
      this.unset("chats");
    } else {
      this.set("chats", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ChatMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChatMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChatMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChatMessage", id.toString(), this);
    }
  }

  static load(id: string): ChatMessage | null {
    return changetype<ChatMessage | null>(store.get("ChatMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get channel(): string {
    let value = this.get("channel");
    return value!.toString();
  }

  set channel(value: string) {
    this.set("channel", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get content(): string {
    let value = this.get("content");
    return value!.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get eplies(): Array<string> | null {
    let value = this.get("eplies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set eplies(value: Array<string> | null) {
    if (!value) {
      this.unset("eplies");
    } else {
      this.set("eplies", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ChatReply extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChatReply entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChatReply must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChatReply", id.toString(), this);
    }
  }

  static load(id: string): ChatReply | null {
    return changetype<ChatReply | null>(store.get("ChatReply", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get channel(): string {
    let value = this.get("channel");
    return value!.toString();
  }

  set channel(value: string) {
    this.set("channel", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get origin(): string {
    let value = this.get("origin");
    return value!.toString();
  }

  set origin(value: string) {
    this.set("origin", Value.fromString(value));
  }

  get content(): string {
    let value = this.get("content");
    return value!.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }
}

export class BroadcastMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BroadcastMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BroadcastMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BroadcastMessage", id.toString(), this);
    }
  }

  static load(id: string): BroadcastMessage | null {
    return changetype<BroadcastMessage | null>(
      store.get("BroadcastMessage", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get content(): string {
    let value = this.get("content");
    return value!.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get replies(): Array<string> | null {
    let value = this.get("replies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set replies(value: Array<string> | null) {
    if (!value) {
      this.unset("replies");
    } else {
      this.set("replies", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Connection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Connection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Connection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Connection", id.toString(), this);
    }
  }

  static load(id: string): Connection | null {
    return changetype<Connection | null>(store.get("Connection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get follower(): string {
    let value = this.get("follower");
    return value!.toString();
  }

  set follower(value: string) {
    this.set("follower", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }
}

export class UserChannel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserChannel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserChannel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserChannel", id.toString(), this);
    }
  }

  static load(id: string): UserChannel | null {
    return changetype<UserChannel | null>(store.get("UserChannel", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get channel(): string {
    let value = this.get("channel");
    return value!.toString();
  }

  set channel(value: string) {
    this.set("channel", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class BroadcastReply extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BroadcastReply entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BroadcastReply must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BroadcastReply", id.toString(), this);
    }
  }

  static load(id: string): BroadcastReply | null {
    return changetype<BroadcastReply | null>(store.get("BroadcastReply", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get origin(): string {
    let value = this.get("origin");
    return value!.toString();
  }

  set origin(value: string) {
    this.set("origin", Value.fromString(value));
  }

  get content(): string {
    let value = this.get("content");
    return value!.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }
}
